/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.z.registration.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.z.registration.model.PohoneNumber;
import com.z.registration.model.PohoneNumberModel;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

/**
 * The base model implementation for the PohoneNumber service. Represents a row in the &quot;Z_PohoneNumber&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.z.registration.model.PohoneNumberModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PohoneNumberImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. All methods that expect a pohone number model instance should use the {@link com.z.registration.model.PohoneNumber} interface instead.
 * </p>
 *
 * @author Sr. Eladio
 * @see PohoneNumberImpl
 * @see com.z.registration.model.PohoneNumber
 * @see com.z.registration.model.PohoneNumberModel
 * @generated
 */
public class PohoneNumberModelImpl extends BaseModelImpl<PohoneNumber>
	implements PohoneNumberModel {
	public static final String TABLE_NAME = "Z_PohoneNumber";
	public static final Object[][] TABLE_COLUMNS = {
			{ "foreingMemberId", new Integer(Types.BIGINT) },
			{ "number_", new Integer(Types.VARCHAR) }
		};
	public static final String TABLE_SQL_CREATE = "create table Z_PohoneNumber (foreingMemberId LONG not null primary key,number_ VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Z_PohoneNumber";
	public static final String ORDER_BY_JPQL = " ORDER BY pohoneNumber.number ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Z_PohoneNumber.number_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.z.registration.model.PohoneNumber"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.z.registration.model.PohoneNumber"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.z.registration.model.PohoneNumber"));

	public PohoneNumberModelImpl() {
	}

	public long getPrimaryKey() {
		return _foreingMemberId;
	}

	public void setPrimaryKey(long pk) {
		setForeingMemberId(pk);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_foreingMemberId);
	}

	public long getForeingMemberId() {
		return _foreingMemberId;
	}

	public void setForeingMemberId(long foreingMemberId) {
		_foreingMemberId = foreingMemberId;
	}

	public String getNumber() {
		if (_number == null) {
			return StringPool.BLANK;
		}
		else {
			return _number;
		}
	}

	public void setNumber(String number) {
		_number = number;
	}

	public PohoneNumber toEscapedModel() {
		if (isEscapedModel()) {
			return (PohoneNumber)this;
		}
		else {
			return (PohoneNumber)Proxy.newProxyInstance(PohoneNumber.class.getClassLoader(),
				new Class[] { PohoneNumber.class },
				new AutoEscapeBeanHandler(this));
		}
	}

	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					PohoneNumber.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	public Object clone() {
		PohoneNumberImpl pohoneNumberImpl = new PohoneNumberImpl();

		pohoneNumberImpl.setForeingMemberId(getForeingMemberId());

		pohoneNumberImpl.setNumber((Member)getNumber().clone());

		return pohoneNumberImpl;
	}

	public int compareTo(PohoneNumber pohoneNumber) {
		int value = 0;

		value = getNumber().compareTo(pohoneNumber.getNumber());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		PohoneNumber pohoneNumber = null;

		try {
			pohoneNumber = (PohoneNumber)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long pk = pohoneNumber.getPrimaryKey();

		if (getPrimaryKey() == pk) {
			return true;
		}
		else {
			return false;
		}
	}

	public int hashCode() {
		return (int)getPrimaryKey();
	}

	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{foreingMemberId=");
		sb.append(getForeingMemberId());
		sb.append(", number=");
		sb.append(getNumber());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.z.registration.model.PohoneNumber");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>foreingMemberId</column-name><column-value><![CDATA[");
		sb.append(getForeingMemberId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>number</column-name><column-value><![CDATA[");
		sb.append(getNumber());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private long _foreingMemberId;
	private String _number;
	private transient ExpandoBridge _expandoBridge;
}