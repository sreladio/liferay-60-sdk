/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.oldschool.user.registration.service.impl;

import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.oldschool.user.registration.model.USMember;
import com.oldschool.user.registration.model.impl.USMemberImpl;
import com.oldschool.user.registration.service.base.USMemberLocalServiceBaseImpl;

/**
 * The implementation of the u s member local service.
 *
 * <p>
 * All custom service methods should be put in this class. Whenever methods are added, rerun ServiceBuilder to copy their definitions into the {@link com.oldschool.user.registration.service.USMemberLocalService} interface.
 * </p>
 *
 * <p>
 * Never reference this interface directly. Always use {@link com.oldschool.user.registration.service.USMemberLocalServiceUtil} to access the u s member local service.
 * </p>
 *
 * <p>
 * This is a local service. Methods of this service will not have security checks based on the propagated JAAS credentials because this service can only be accessed from within the same VM.
 * </p>
 *
 * @author Sr. Eladio
 * @see com.oldschool.user.registration.service.base.USMemberLocalServiceBaseImpl
 * @see com.oldschool.user.registration.service.USMemberLocalServiceUtil
 */
public class USMemberLocalServiceImpl extends USMemberLocalServiceBaseImpl {
	
	public USMember addMember(USMember newMember, long userId) 
			throws SystemException, PortalException {
		
		// 1 - Creamos un objeto USMember vac�o:
		//
		//			- prProductPersistence: Es una instancia de la capa DAO inyectada por Spring
		//			- create(): Es generado por el ServiceBuilder y nos devolver� la instancia
		//			- counterLocalService: Es una utilidad de Liferay para crear la clave primaria
		
		USMember member = usMemberPersistence.create(counterLocalService.increment(USMember.class.getName()));
		
		// 2- Los Resources son utilizados en Liferay para gestionar los permisos:
		//
		//			- companyID: Un recurso con el alcance que representa una y s�lo una instancia USMember 
		//						 (la que se acaba de crear). Este recurso permite al administrador configurar 
		//						 los permisos para operar en este USMember espec�fico
		//
		//			- groupID: Este recurso permite al administrador establecer un permiso que se aplica a 
		//					   USMember dentro de una determinada comunidad u organizaci�n
		//
		//			- userId: Es el identificador de usuario del usuario que ha creado el recurso. 
		//					  El sistema de permisos autom�ticamente le dar� todos los permisos para este usuario.
		//
		//			- class.getName(): Identifica el tipo de reurso, y por convenci�n se recomienda
		//							   utilizar el nombre de la clase de la entidad
		//
		//			- getPrimaryKey(): Para que el recurso tenga un �nico ID
		//
		//			- false: le indicamos que USMember no es una entidad que representa a un portlet
		//
		//			- true, true: determina si se le dan una serie de permisos al propietario del grupo
		//						  y a usuarios invitados
		
		resourceLocalService.addResources(newMember.getCompanyId(), 
				  						 newMember.getGroupId(), 
				  						 userId,
				  						 USMember.class.getName(),
				  						 member.getPrimaryKey(), 
				  						 false, 
				  						 true, 
				  						 false); // lo cambio a false
		
		// 3 - Una vez tenemos nuestro objeto, le metemos los valores
		//	   que ser�n almacenados en la base de datos
		
		member.setMemberFirstName(newMember.getMemberFirstName());
		member.setMemberLastName(newMember.getMemberLastName());
		member.setMemberPhoneNumber(newMember.getMemberPhoneNumber());
		member.setMemberEmail(newMember.getMemberEmail());
		//member.setMemberBirthDate(newMember.getMemberBirthDate());
	    member.setCompanyId(newMember.getCompanyId());
		member.setGroupId(newMember.getGroupId());
		
		// 4 - Retornamos el objeto que acabamos de crear a la capa
		//	   que llam� en primer lugar a este m�todo
		return usMemberPersistence.update(member, false);
	}
}