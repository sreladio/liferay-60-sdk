/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.oldschool.user.registration.service.persistence;

import com.liferay.portal.NoSuchModelException;
import com.liferay.portal.kernel.annotation.BeanReference;
import com.liferay.portal.kernel.cache.CacheRegistryUtil;
import com.liferay.portal.kernel.dao.orm.EntityCacheUtil;
import com.liferay.portal.kernel.dao.orm.FinderCacheUtil;
import com.liferay.portal.kernel.dao.orm.FinderPath;
import com.liferay.portal.kernel.dao.orm.Query;
import com.liferay.portal.kernel.dao.orm.QueryUtil;
import com.liferay.portal.kernel.dao.orm.Session;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.InstanceFactory;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.model.ModelListener;
import com.liferay.portal.service.persistence.BatchSessionUtil;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserPersistence;
import com.liferay.portal.service.persistence.impl.BasePersistenceImpl;

import com.oldschool.user.registration.NoSuchPhoneNumberException;
import com.oldschool.user.registration.model.USPhoneNumber;
import com.oldschool.user.registration.model.impl.USPhoneNumberImpl;
import com.oldschool.user.registration.model.impl.USPhoneNumberModelImpl;

import java.io.Serializable;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * The persistence implementation for the u s phone number service.
 *
 * <p>
 * Never modify or reference this class directly. Always use {@link USPhoneNumberUtil} to access the u s phone number persistence. Modify <code>service.xml</code> and rerun ServiceBuilder to regenerate this class.
 * </p>
 *
 * <p>
 * Caching information and settings can be found in <code>portal.properties</code>
 * </p>
 *
 * @author Sr. Eladio
 * @see USPhoneNumberPersistence
 * @see USPhoneNumberUtil
 * @generated
 */
public class USPhoneNumberPersistenceImpl extends BasePersistenceImpl<USPhoneNumber>
	implements USPhoneNumberPersistence {
	public static final String FINDER_CLASS_NAME_ENTITY = USPhoneNumberImpl.class.getName();
	public static final String FINDER_CLASS_NAME_LIST = FINDER_CLASS_NAME_ENTITY +
		".List";
	public static final FinderPath FINDER_PATH_FIND_ALL = new FinderPath(USPhoneNumberModelImpl.ENTITY_CACHE_ENABLED,
			USPhoneNumberModelImpl.FINDER_CACHE_ENABLED,
			FINDER_CLASS_NAME_LIST, "findAll", new String[0]);
	public static final FinderPath FINDER_PATH_COUNT_ALL = new FinderPath(USPhoneNumberModelImpl.ENTITY_CACHE_ENABLED,
			USPhoneNumberModelImpl.FINDER_CACHE_ENABLED,
			FINDER_CLASS_NAME_LIST, "countAll", new String[0]);

	/**
	 * Caches the u s phone number in the entity cache if it is enabled.
	 *
	 * @param usPhoneNumber the u s phone number to cache
	 */
	public void cacheResult(USPhoneNumber usPhoneNumber) {
		EntityCacheUtil.putResult(USPhoneNumberModelImpl.ENTITY_CACHE_ENABLED,
			USPhoneNumberImpl.class, usPhoneNumber.getPrimaryKey(),
			usPhoneNumber);
	}

	/**
	 * Caches the u s phone numbers in the entity cache if it is enabled.
	 *
	 * @param usPhoneNumbers the u s phone numbers to cache
	 */
	public void cacheResult(List<USPhoneNumber> usPhoneNumbers) {
		for (USPhoneNumber usPhoneNumber : usPhoneNumbers) {
			if (EntityCacheUtil.getResult(
						USPhoneNumberModelImpl.ENTITY_CACHE_ENABLED,
						USPhoneNumberImpl.class, usPhoneNumber.getPrimaryKey(),
						this) == null) {
				cacheResult(usPhoneNumber);
			}
		}
	}

	/**
	 * Clears the cache for all u s phone numbers.
	 *
	 * <p>
	 * The {@link com.liferay.portal.kernel.dao.orm.EntityCache} and {@link com.liferay.portal.kernel.dao.orm.FinderCache} are both cleared by this method.
	 * </p>
	 */
	public void clearCache() {
		CacheRegistryUtil.clear(USPhoneNumberImpl.class.getName());
		EntityCacheUtil.clearCache(USPhoneNumberImpl.class.getName());
		FinderCacheUtil.clearCache(FINDER_CLASS_NAME_ENTITY);
		FinderCacheUtil.clearCache(FINDER_CLASS_NAME_LIST);
	}

	/**
	 * Clears the cache for the u s phone number.
	 *
	 * <p>
	 * The {@link com.liferay.portal.kernel.dao.orm.EntityCache} and {@link com.liferay.portal.kernel.dao.orm.FinderCache} are both cleared by this method.
	 * </p>
	 */
	public void clearCache(USPhoneNumber usPhoneNumber) {
		EntityCacheUtil.removeResult(USPhoneNumberModelImpl.ENTITY_CACHE_ENABLED,
			USPhoneNumberImpl.class, usPhoneNumber.getPrimaryKey());
	}

	/**
	 * Creates a new u s phone number with the primary key. Does not add the u s phone number to the database.
	 *
	 * @param numberId the primary key for the new u s phone number
	 * @return the new u s phone number
	 */
	public USPhoneNumber create(String numberId) {
		USPhoneNumber usPhoneNumber = new USPhoneNumberImpl();

		usPhoneNumber.setNew(true);
		usPhoneNumber.setPrimaryKey(numberId);

		return usPhoneNumber;
	}

	/**
	 * Removes the u s phone number with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param primaryKey the primary key of the u s phone number to remove
	 * @return the u s phone number that was removed
	 * @throws com.liferay.portal.NoSuchModelException if a u s phone number with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public USPhoneNumber remove(Serializable primaryKey)
		throws NoSuchModelException, SystemException {
		return remove((String)primaryKey);
	}

	/**
	 * Removes the u s phone number with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param numberId the primary key of the u s phone number to remove
	 * @return the u s phone number that was removed
	 * @throws com.oldschool.user.registration.NoSuchPhoneNumberException if a u s phone number with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public USPhoneNumber remove(String numberId)
		throws NoSuchPhoneNumberException, SystemException {
		Session session = null;

		try {
			session = openSession();

			USPhoneNumber usPhoneNumber = (USPhoneNumber)session.get(USPhoneNumberImpl.class,
					numberId);

			if (usPhoneNumber == null) {
				if (_log.isWarnEnabled()) {
					_log.warn(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY + numberId);
				}

				throw new NoSuchPhoneNumberException(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY +
					numberId);
			}

			return remove(usPhoneNumber);
		}
		catch (NoSuchPhoneNumberException nsee) {
			throw nsee;
		}
		catch (Exception e) {
			throw processException(e);
		}
		finally {
			closeSession(session);
		}
	}

	protected USPhoneNumber removeImpl(USPhoneNumber usPhoneNumber)
		throws SystemException {
		usPhoneNumber = toUnwrappedModel(usPhoneNumber);

		Session session = null;

		try {
			session = openSession();

			BatchSessionUtil.delete(session, usPhoneNumber);
		}
		catch (Exception e) {
			throw processException(e);
		}
		finally {
			closeSession(session);
		}

		FinderCacheUtil.clearCache(FINDER_CLASS_NAME_LIST);

		EntityCacheUtil.removeResult(USPhoneNumberModelImpl.ENTITY_CACHE_ENABLED,
			USPhoneNumberImpl.class, usPhoneNumber.getPrimaryKey());

		return usPhoneNumber;
	}

	public USPhoneNumber updateImpl(
		com.oldschool.user.registration.model.USPhoneNumber usPhoneNumber,
		boolean merge) throws SystemException {
		usPhoneNumber = toUnwrappedModel(usPhoneNumber);

		Session session = null;

		try {
			session = openSession();

			BatchSessionUtil.update(session, usPhoneNumber, merge);

			usPhoneNumber.setNew(false);
		}
		catch (Exception e) {
			throw processException(e);
		}
		finally {
			closeSession(session);
		}

		FinderCacheUtil.clearCache(FINDER_CLASS_NAME_LIST);

		EntityCacheUtil.putResult(USPhoneNumberModelImpl.ENTITY_CACHE_ENABLED,
			USPhoneNumberImpl.class, usPhoneNumber.getPrimaryKey(),
			usPhoneNumber);

		return usPhoneNumber;
	}

	protected USPhoneNumber toUnwrappedModel(USPhoneNumber usPhoneNumber) {
		if (usPhoneNumber instanceof USPhoneNumberImpl) {
			return usPhoneNumber;
		}

		USPhoneNumberImpl usPhoneNumberImpl = new USPhoneNumberImpl();

		usPhoneNumberImpl.setNew(usPhoneNumber.isNew());
		usPhoneNumberImpl.setPrimaryKey(usPhoneNumber.getPrimaryKey());

		usPhoneNumberImpl.setNumberId(usPhoneNumber.getNumberId());
		usPhoneNumberImpl.setMemberId(usPhoneNumber.getMemberId());

		return usPhoneNumberImpl;
	}

	/**
	 * Finds the u s phone number with the primary key or throws a {@link com.liferay.portal.NoSuchModelException} if it could not be found.
	 *
	 * @param primaryKey the primary key of the u s phone number to find
	 * @return the u s phone number
	 * @throws com.liferay.portal.NoSuchModelException if a u s phone number with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public USPhoneNumber findByPrimaryKey(Serializable primaryKey)
		throws NoSuchModelException, SystemException {
		return findByPrimaryKey((String)primaryKey);
	}

	/**
	 * Finds the u s phone number with the primary key or throws a {@link com.oldschool.user.registration.NoSuchPhoneNumberException} if it could not be found.
	 *
	 * @param numberId the primary key of the u s phone number to find
	 * @return the u s phone number
	 * @throws com.oldschool.user.registration.NoSuchPhoneNumberException if a u s phone number with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public USPhoneNumber findByPrimaryKey(String numberId)
		throws NoSuchPhoneNumberException, SystemException {
		USPhoneNumber usPhoneNumber = fetchByPrimaryKey(numberId);

		if (usPhoneNumber == null) {
			if (_log.isWarnEnabled()) {
				_log.warn(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY + numberId);
			}

			throw new NoSuchPhoneNumberException(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY +
				numberId);
		}

		return usPhoneNumber;
	}

	/**
	 * Finds the u s phone number with the primary key or returns <code>null</code> if it could not be found.
	 *
	 * @param primaryKey the primary key of the u s phone number to find
	 * @return the u s phone number, or <code>null</code> if a u s phone number with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public USPhoneNumber fetchByPrimaryKey(Serializable primaryKey)
		throws SystemException {
		return fetchByPrimaryKey((String)primaryKey);
	}

	/**
	 * Finds the u s phone number with the primary key or returns <code>null</code> if it could not be found.
	 *
	 * @param numberId the primary key of the u s phone number to find
	 * @return the u s phone number, or <code>null</code> if a u s phone number with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public USPhoneNumber fetchByPrimaryKey(String numberId)
		throws SystemException {
		USPhoneNumber usPhoneNumber = (USPhoneNumber)EntityCacheUtil.getResult(USPhoneNumberModelImpl.ENTITY_CACHE_ENABLED,
				USPhoneNumberImpl.class, numberId, this);

		if (usPhoneNumber == null) {
			Session session = null;

			try {
				session = openSession();

				usPhoneNumber = (USPhoneNumber)session.get(USPhoneNumberImpl.class,
						numberId);
			}
			catch (Exception e) {
				throw processException(e);
			}
			finally {
				if (usPhoneNumber != null) {
					cacheResult(usPhoneNumber);
				}

				closeSession(session);
			}
		}

		return usPhoneNumber;
	}

	/**
	 * Finds all the u s phone numbers.
	 *
	 * @return the u s phone numbers
	 * @throws SystemException if a system exception occurred
	 */
	public List<USPhoneNumber> findAll() throws SystemException {
		return findAll(QueryUtil.ALL_POS, QueryUtil.ALL_POS, null);
	}

	/**
	 * Finds a range of all the u s phone numbers.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param start the lower bound of the range of u s phone numbers to return
	 * @param end the upper bound of the range of u s phone numbers to return (not inclusive)
	 * @return the range of u s phone numbers
	 * @throws SystemException if a system exception occurred
	 */
	public List<USPhoneNumber> findAll(int start, int end)
		throws SystemException {
		return findAll(start, end, null);
	}

	/**
	 * Finds an ordered range of all the u s phone numbers.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param start the lower bound of the range of u s phone numbers to return
	 * @param end the upper bound of the range of u s phone numbers to return (not inclusive)
	 * @param orderByComparator the comparator to order the results by
	 * @return the ordered range of u s phone numbers
	 * @throws SystemException if a system exception occurred
	 */
	public List<USPhoneNumber> findAll(int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		Object[] finderArgs = new Object[] {
				String.valueOf(start), String.valueOf(end),
				String.valueOf(orderByComparator)
			};

		List<USPhoneNumber> list = (List<USPhoneNumber>)FinderCacheUtil.getResult(FINDER_PATH_FIND_ALL,
				finderArgs, this);

		if (list == null) {
			StringBundler query = null;
			String sql = null;

			if (orderByComparator != null) {
				query = new StringBundler(2 +
						(orderByComparator.getOrderByFields().length * 3));

				query.append(_SQL_SELECT_USPHONENUMBER);

				appendOrderByComparator(query, _ORDER_BY_ENTITY_ALIAS,
					orderByComparator);

				sql = query.toString();
			}
			else {
				sql = _SQL_SELECT_USPHONENUMBER.concat(USPhoneNumberModelImpl.ORDER_BY_JPQL);
			}

			Session session = null;

			try {
				session = openSession();

				Query q = session.createQuery(sql);

				if (orderByComparator == null) {
					list = (List<USPhoneNumber>)QueryUtil.list(q, getDialect(),
							start, end, false);

					Collections.sort(list);
				}
				else {
					list = (List<USPhoneNumber>)QueryUtil.list(q, getDialect(),
							start, end);
				}
			}
			catch (Exception e) {
				throw processException(e);
			}
			finally {
				if (list == null) {
					FinderCacheUtil.removeResult(FINDER_PATH_FIND_ALL,
						finderArgs);
				}
				else {
					cacheResult(list);

					FinderCacheUtil.putResult(FINDER_PATH_FIND_ALL, finderArgs,
						list);
				}

				closeSession(session);
			}
		}

		return list;
	}

	/**
	 * Removes all the u s phone numbers from the database.
	 *
	 * @throws SystemException if a system exception occurred
	 */
	public void removeAll() throws SystemException {
		for (USPhoneNumber usPhoneNumber : findAll()) {
			remove(usPhoneNumber);
		}
	}

	/**
	 * Counts all the u s phone numbers.
	 *
	 * @return the number of u s phone numbers
	 * @throws SystemException if a system exception occurred
	 */
	public int countAll() throws SystemException {
		Object[] finderArgs = new Object[0];

		Long count = (Long)FinderCacheUtil.getResult(FINDER_PATH_COUNT_ALL,
				finderArgs, this);

		if (count == null) {
			Session session = null;

			try {
				session = openSession();

				Query q = session.createQuery(_SQL_COUNT_USPHONENUMBER);

				count = (Long)q.uniqueResult();
			}
			catch (Exception e) {
				throw processException(e);
			}
			finally {
				if (count == null) {
					count = Long.valueOf(0);
				}

				FinderCacheUtil.putResult(FINDER_PATH_COUNT_ALL, finderArgs,
					count);

				closeSession(session);
			}
		}

		return count.intValue();
	}

	/**
	 * Initializes the u s phone number persistence.
	 */
	public void afterPropertiesSet() {
		String[] listenerClassNames = StringUtil.split(GetterUtil.getString(
					com.liferay.util.service.ServiceProps.get(
						"value.object.listener.com.oldschool.user.registration.model.USPhoneNumber")));

		if (listenerClassNames.length > 0) {
			try {
				List<ModelListener<USPhoneNumber>> listenersList = new ArrayList<ModelListener<USPhoneNumber>>();

				for (String listenerClassName : listenerClassNames) {
					listenersList.add((ModelListener<USPhoneNumber>)InstanceFactory.newInstance(
							listenerClassName));
				}

				listeners = listenersList.toArray(new ModelListener[listenersList.size()]);
			}
			catch (Exception e) {
				_log.error(e);
			}
		}
	}

	public void destroy() {
		EntityCacheUtil.removeCache(USPhoneNumberImpl.class.getName());
		FinderCacheUtil.removeCache(FINDER_CLASS_NAME_ENTITY);
		FinderCacheUtil.removeCache(FINDER_CLASS_NAME_LIST);
	}

	@BeanReference(type = USMemberPersistence.class)
	protected USMemberPersistence usMemberPersistence;
	@BeanReference(type = USPhoneNumberPersistence.class)
	protected USPhoneNumberPersistence usPhoneNumberPersistence;
	@BeanReference(type = ResourcePersistence.class)
	protected ResourcePersistence resourcePersistence;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private static final String _SQL_SELECT_USPHONENUMBER = "SELECT usPhoneNumber FROM USPhoneNumber usPhoneNumber";
	private static final String _SQL_COUNT_USPHONENUMBER = "SELECT COUNT(usPhoneNumber) FROM USPhoneNumber usPhoneNumber";
	private static final String _ORDER_BY_ENTITY_ALIAS = "usPhoneNumber.";
	private static final String _NO_SUCH_ENTITY_WITH_PRIMARY_KEY = "No USPhoneNumber exists with the primary key ";
	private static Log _log = LogFactoryUtil.getLog(USPhoneNumberPersistenceImpl.class);
}